name: Cloud App CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Docker related variables
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'cloud-app-laboratory' }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'docker.io' }}
  
  # GCP related variables
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  GKE_REGION: ${{ vars.GKE_REGION }}
  GKE_DEPLOYMENT_NAME: ${{ vars.GKE_DEPLOYMENT_NAME || 'cloud-app-lab' }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
      version: ${{ steps.image_tag.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Generate version and image tag
        id: image_tag
        run: |
          # Generate a version using date and short commit SHA
          DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          VERSION="v${DATE}-${SHORT_SHA}"
          
          # Set the tag for the image
          TAG="${VERSION}"
          
          # Output the tag and version
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated image tag: $TAG"
          echo "Docker image name: ${{ env.DOCKER_IMAGE_NAME }}"

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Auth to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --region ${{ env.GKE_REGION }} --project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy to Kubernetes
        run: |
          # Get the image tag from the build job
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          VERSION="${{ needs.build.outputs.version }}"
          FULL_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
          
          echo "Deploying version $VERSION with image: $FULL_IMAGE_NAME"
          
          # Create a temporary deployment file with the current image
          cat <<EOF > deployment-patched.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ env.GKE_DEPLOYMENT_NAME }}
            labels:
              app: ${{ env.GKE_DEPLOYMENT_NAME }}
              version: "${VERSION}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: ${{ env.GKE_DEPLOYMENT_NAME }}
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            template:
              metadata:
                labels:
                  app: ${{ env.GKE_DEPLOYMENT_NAME }}
              spec:
                containers:
                - name: app-container
                  image: ${FULL_IMAGE_NAME}
                  ports:
                  - containerPort: 8080
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "256Mi"
                    limits:
                      cpu: "500m"
                      memory: "512Mi"
                  readinessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  livenessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 60
                    periodSeconds: 15
                  env:
                  - name: SPRING_PROFILES_ACTIVE
                    value: "prod"
                  - name: JAVA_OPTS
                    value: "-XX:+UseContainerSupport -Xmx512m"
          EOF
          
          # Apply the kubernetes manifests
          kubectl apply -f deployment-patched.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.GKE_DEPLOYMENT_NAME }}
