name: Cloud App CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Docker related variables
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'docker.io' }}
  DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE || secrets.DOCKERHUB_USERNAME }}
  
  # GCP related variables
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  GKE_REGION: ${{ vars.GKE_REGION }}
  GKE_DEPLOYMENT_NAME: ${{ vars.GKE_DEPLOYMENT_NAME }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
      version: ${{ steps.image_tag.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Generate version and image tag
        id: image_tag
        run: |
          # Generate a version using date and short commit SHA
          DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          VERSION="v${DATE}-${SHORT_SHA}"
          
          # Set the full tag for the image
          TAG="cloud-app-${VERSION}"
          
          # Output the tag and version
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated image tag: $TAG"

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Auth to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --region ${{ env.GKE_REGION }} --project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy to Kubernetes
        run: |
          # Get the image tag from the build job
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          VERSION="${{ needs.build.outputs.version }}"
          FULL_IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
          
          echo "Deploying version $VERSION with image: $FULL_IMAGE_NAME"
          
          # Replace variables in the deployment file
          cat kubernetes/deployment.yaml | \
            sed "s|\${DOCKER_REGISTRY}|${{ env.DOCKER_REGISTRY }}|g" | \
            sed "s|\${DOCKER_NAMESPACE}|${{ env.DOCKER_NAMESPACE }}|g" | \
            sed "s|\${DOCKER_IMAGE_NAME}|${{ env.DOCKER_IMAGE_NAME }}|g" | \
            sed "s|:latest|:${IMAGE_TAG}|g" > kubernetes/deployment-patched.yaml
          
          # Apply the kubernetes manifests
          kubectl apply -f kubernetes/deployment-patched.yaml
          kubectl apply -f kubernetes/service.yaml
          
          # Add version label to deployment
          kubectl patch deployment ${{ env.GKE_DEPLOYMENT_NAME }} -p "{\"metadata\":{\"labels\":{\"version\":\"${VERSION}\"}}}"

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.GKE_DEPLOYMENT_NAME }}
